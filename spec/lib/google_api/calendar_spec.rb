# frozen_string_literal: true

require 'spec_helper'

RSpec.describe GoogleAPI::Calendar do
  def test_event
    {
      summary: 'API Test Event',
      description: 'This is a test event generated by the API gem.',
      start: DateTime.strptime('201906051200', '%Y%m%d%H%M'),
      end: DateTime.strptime('201906051400', '%Y%m%d%H%M')
    }
  end

  describe 'service class' do
    subject { described_class.new }

    it 'does not raise an error' do
      expect { subject.send(:service_class) }.not_to raise_error
    end

    it 'is the correct class' do
      expect(subject.send(:service_class)).to eql(Google::Apis::CalendarV3::CalendarService)
    end
  end

  context 'with an invalid calendar' do
    let(:test_cal_id) { 'not-a-calendar' }

    subject { GoogleAPI::Configured::Calendar.new(test_cal_id) }

    it 'returns not found from list' do
      expect { subject.list }.to raise_error(
        Google::Apis::ClientError, 'notFound: Not Found'
      )
    end

    it 'returns not found from create' do
      expect { subject.create }.to raise_error(
        Google::Apis::ClientError, 'notFound: Not Found'
      )
    end

    it 'returns not found from get' do
      expect { subject.get('not-an-event') }.to raise_error(
        Google::Apis::ClientError, 'notFound: Not Found'
      )
    end

    it 'returns not found from update' do
      expect { subject.update('not-an-event') }.to raise_error(
        Google::Apis::ClientError, 'notFound: Not Found'
      )
    end

    it 'returns event not found from delete' do
      expect(subject.delete('not-an-event')).to eql(
        :event_not_found
      )
    end

    it 'returns nil from permit' do
      expect(subject.permit(email: 'not-a-user')).to be_nil
    end

    it 'returns permission not found from unpermit' do
      expect(subject.unpermit(calendar_rule_id: 'not-a-user')).to eql(:permission_not_found)
    end
  end

  context 'with a valid calendar' do
    let(:test_cal_id) { ENV['GOOGLE_CALENDAR_ID_TEST'] }

    subject { GoogleAPI::Configured::Calendar.new(test_cal_id) }

    it 'returns a list' do
      expect(subject.list).to be_a(Google::Apis::CalendarV3::Events)
    end

    it 'returns the array of all events from list_all' do
      subject.create(test_event) # Ensure at least one event exists

      expect(subject.list_all.map(&:class).uniq).to eql([Google::Apis::CalendarV3::Event])
    end

    it 'creates an event' do
      expect(subject.create(test_event)).to be_a(Google::Apis::CalendarV3::Event)
    end

    describe 'conference data' do
      it 'creates an event with a new conference' do
        event = test_event.merge(conference: { id: :new })

        expect(subject.create(event)).to be_a(Google::Apis::CalendarV3::Event)
      end

      it 'creates an event with conference data' do
        event = subject.create(test_event)
        event = subject.add_conference(event.id)
        event_options = test_event.merge(
          conference: {
            id: event.conference_data.conference_id,
            signature: event.conference_data.signature
          }
        )

        expect(subject.create(event_options)).to be_a(Google::Apis::CalendarV3::Event)
      end

      it 'returns valid conference information' do
        event = subject.create(test_event)
        event = subject.add_conference(event.id)

        expect(subject.conference_info(event.id)).to eql(
          id: event.conference_data.conference_id,
          signature: event.conference_data.signature
        )
      end
    end

    it 'gets an event ' do
      event = subject.create(test_event)
      expect(subject.get(event.id)).to be_a(Google::Apis::CalendarV3::Event)
    end

    it 'patches an event' do
      event = subject.create(test_event)
      subject.patch(event.id, description: 'Patched.')

      expect(subject.get(event.id).description).to eql('Patched.')
    end

    it 'updates an event' do
      event = subject.create(test_event)
      updated_test_event = test_event.merge(description: 'Updated.')
      subject.update(event.id, updated_test_event)

      expect(subject.get(event.id).description).to eql('Updated.')
    end

    it 'deletes an event' do
      event = subject.create(test_event)

      expect(subject.delete(event.id)).to eql('')
    end

    it 'returns nil from permit' do
      expect(subject.permit(email: 'not-a-user')).to be_nil
    end

    it 'returns permission not found from unpermit' do
      expect(subject.unpermit(calendar_rule_id: 'not-a-user')).to eql(:permission_not_found)
    end

    describe 'clear test calendar' do
      it 'does not raise any errors' do
        expect { subject.clear_test_calendar }.not_to raise_error
      end

      it 'rescues from an unhandled rate limit exception' do
        expect { subject.clear_test_calendar(error: true) }.not_to raise_error
      end

      it 'does not raise any errors with verbose' do
        subject.create(test_event)

        silently do
          expect do
            GoogleAPI::Configured::Calendar.new('test').clear_test_calendar(verbose: true)
          end.not_to raise_error
        end
      end
    end

    it 'adds conference data' do
      event = subject.create(test_event)

      expect(subject.add_conference(event.id)).to be_a(Google::Apis::CalendarV3::Event)
    end
  end
end
