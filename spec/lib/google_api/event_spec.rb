# frozen_string_literal: true

require 'spec_helper'

RSpec.describe GoogleAPI::Configured::Calendar::Event do
  def test_event
    {
      summary: 'API Test Event',
      description: 'This is a test event generated by the API gem.',
      start: DateTime.strptime('201906051200', '%Y%m%d%H%M'),
      end: DateTime.strptime('201906051400', '%Y%m%d%H%M')
    }
  end

  let(:test_cal_id) { ENV['GOOGLE_CALENDAR_ID_TEST'] }

  subject do
    event = GoogleAPI::Configured::Calendar.new(test_cal_id).create(test_event)
    GoogleAPI::Configured::Calendar::Event.new(test_cal_id, event.id)
  end

  it 'gets the event' do
    expect(subject.get).to be_a(Google::Apis::CalendarV3::Event)
  end

  it 'patches the event' do
    subject.patch(description: 'Patched.')

    expect(subject.get.description).to eql('Patched.')
  end

  it 'updates the event' do
    updated_test_event = test_event.merge(description: 'Updated.')
    subject.update(updated_test_event)

    expect(subject.get.description).to eql('Updated.')
  end

  it 'deletes the event' do
    expect(subject.delete).to eql('')
  end

  describe 'conference data' do
    it 'adds conference data' do
      expect(subject.add_conference).to be_a(Google::Apis::CalendarV3::Event)
    end

    it 'returns valid conference information' do
      event = subject.add_conference
      subject.patch(
        conference: {
          id: event.conference_data.conference_id,
          signature: event.conference_data.signature
        }
      )

      expect(subject.conference_info).to eql(
        id: event.conference_data.conference_id,
        signature: event.conference_data.signature
      )
    end
  end
end
